# A requests module that was inspired by Python's Requests library.
# This module provides a human-friendly API to making HTTP requests.
module Requests

# The public API
export request, GET, POST

# Represent HTTP methods as Int.
const GET = 1
const POST = 2
const PUT = 3
const DELETE = 4

# HTTP method Int to String.
method_dict = Dict{Int,String}()
method_dict[GET] = "GET"
method_dict[POST] = "POST"
method_dict[PUT] = "PUT"
method_dict[DELETE] = "DELETE"

typealias Headers Dict{String, String}
# A string representation of headers.
# Separated by a \r\n with a trailing \r\n.
repr(h::Headers) = string(join(["$k: $v" for (k, v) in h], "\r\n"), "\r\n")

# Set a key value pair on a Headers.
add_header(h::Headers, key::String, value::String) = h[key] = value

#  This will get replaced by the HttpLib Request
type Request
    method::String
    headers::Headers
    uri::String
end
# A string representation of a Request.
# These are the bytes that actually get written to the socket.
repr(r::Request) = string("$(r.method) / HTTP/1.1\r\n", "Host: $(r.uri)\r\n", repr(r.headers), "\r\n") 

# Make a connection on a socket and write some bytes to that socket.
# This function instantiates a Request and merges passed in data with the default headers.
# It returns the entirety of the response the request got.
#
#     request("http://httpbin.org")
#     # FIXME:
#     request("http://duckduckgo.com", ["q" => "mouse"])
#     # FIXME:
#     request(POST, "http://httpbin.org/poost", ["data" => "some serious data"])
#
function request{T <: String}(method::Integer, uri::T, data::Dict{T, T})
    client = connect(TcpSocket(), uri, 80)[1]
    req = Request(method_dict[method], default_headers(), uri)
    merge!(req.headers, data)
    write(client, repr(req))
    readall(client)
end
# Implies a GET request with some data.
request(uri::String, data::Dict{String, String}) = request(GET, uri, data)
# Implies a GET request with no data.
request(uri::String)                             = request{T <: String}(GET, uri, Dict{T, T}())

# Returns the default user agent the requests generated by this library use.
default_user_agent() = "julia-requests/0.1 julia/$VERSION"
# Returns an instantiated Headers type with default headers.
function default_headers()
    h = Headers()
    add_header(h, "User-Agent", default_user_agent())
    add_header(h, "Accept-Encoding", "gzip, deflate, compress")
    add_header(h, "Accept", "*/*")
    h
end

end # end module
